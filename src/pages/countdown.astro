---
import Settings from "../components/Settings.astro";
import Layout from "../layouts/Layout.astro";
---
<Layout title="Countdown | [cleantimer]">
    <link slot="head" id="theme-css-link" rel="stylesheet" href="/themes/light.css"> 
    <main id="container" class="container">
        <div id="time" class="time"></div>
    </main>
    <Settings></Settings>
</Layout>

<script>
    import * as chrono from 'chrono-node';
    import { setupSettings } from '../components/Settings.astro';

    const timeElement = document.getElementById('time')!;
    const containerElement = document.getElementById('container')!;

    const settings = setupSettings();

    // Setup countdown timer
    function parseTime(time: string | null): number {
        if (!time) return Date.now();

        let results = chrono.parse(time);
        if (results.length === 0) {
            results = chrono.parse('in ' + time);
        }
        return results[0]?.date().getTime() || NaN;
    }

    const urlParams = new URLSearchParams(window.location.search)
    const to = parseTime(urlParams.get('t'))
    if (!Number.isFinite(to)) {
        const errorMessage = `Invalid time: '${urlParams.get('t')}'`;
        alert(errorMessage);
        throw errorMessage;
    }

    function formatTime(totalSeconds: number) {
        if (!settings.negative && totalSeconds < 0) {
            totalSeconds = 0;
        }
        const normalizedSeconds = Math.abs(totalSeconds);
        const hours = Math.floor(normalizedSeconds / 3600)
        const minutes = Math.floor((normalizedSeconds % 3600) / 60)
        const seconds = normalizedSeconds % 60
        return `${totalSeconds < 0 ? '-' : ''}${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
    }

    let secondsLeft = 0;
    let alarmActive = false;

    function updateTime() {
        const desiredSecondsLeft = Math.ceil((to - Date.now()) / 1000);
        if (secondsLeft === desiredSecondsLeft) return;
        secondsLeft = desiredSecondsLeft;

        const timeStr = formatTime(secondsLeft);
        timeElement.textContent = timeStr;
        document.title = timeStr + ' | [cleantimer]'

        const desiredAlarmActive = secondsLeft <= 0;
        if (alarmActive == desiredAlarmActive) return;
        alarmActive = desiredAlarmActive;

        if (alarmActive) {
            containerElement.classList.add('alarm')
        } else {
            containerElement.classList.remove('alarm')
        }
        // TODO: Play audio
    }

    setInterval(updateTime, 500);
    updateTime();
</script>

<style>
    @layer default-theme {
        .container {
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .container::after {
            content: '';
            flex: 0 1 15%;
        }
    }
</style>